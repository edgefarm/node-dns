/*
Copyright Â© 2021 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package dns

import (
	"context"
	"fmt"
	"log"
	"os"
	"testing"

	"github.com/edgefarm/node-dns/pkg/dns/config"
	"github.com/stretchr/testify/assert"
)

var (
	predefinedResolvConf string = `
search svc.cluster.local cluster.local
nameserver 8.8.8.8
nameserver 4.4.4.4
`

	predefinedResolvConf2 string = `
# Generated by NetworkManager
nameserver 8.8.8.8
nameserver 9.9.9.9
# NOTE: the libc resolver may not support more than 3 nameservers.
# The nameservers listed below may not be recognized.
nameserver 10.0.0.1
`
)

func setupEdgeDNS(t *testing.T, content string) (*EdgeDNS, string) {
	assert := assert.New(t)
	file, err := os.CreateTemp("", "resolvconf")
	if err != nil {
		log.Fatal(err)
	}

	config := config.NewDNSConfig()
	config.ListenInterface = ""
	config.ResolvConf = file.Name()

	_, err = file.WriteString(content)
	assert.Nil(err)

	e, err := NewEdgeDNS(config)
	assert.Nil(err)
	return e, file.Name()
}

func cleanupEdgeDNS(t *testing.T, file string) {
	os.Remove(file)
}

func TestRemoveSearchDomains(t *testing.T) {
	assert := assert.New(t)
	e, file := setupEdgeDNS(t, predefinedResolvConf)
	defer cleanupEdgeDNS(t, file)

	resolv, err := readFile(file)
	assert.Nil(err)
	assert.Contains(resolv, "search svc.cluster.local cluster.local")
	resolv = e.removeSearchDomains(resolv)
	assert.NotContains(resolv, "search svc.cluster.local cluster.local")
	assert.Contains(resolv, "nameserver 8.8.8.8")
	assert.Contains(resolv, "nameserver 4.4.4.4")
}

func TestLookupUptreamHost(t *testing.T) {
	assert := assert.New(t)
	_, file := setupEdgeDNS(t, predefinedResolvConf)
	defer cleanupEdgeDNS(t, file)
	ips, err := lookupUpstreamHost(context.Background(), "example.com")
	assert.Nil(err)
	assert.NotEmpty(ips)

	ips, err = lookupUpstreamHost(context.Background(), "impossibledomain")
	fmt.Println(err)
	assert.NotNil(err)
	assert.Empty(ips)
}

func TestGetOtherNameservers(t *testing.T) {
	assert := assert.New(t)
	e, file := setupEdgeDNS(t, predefinedResolvConf)
	defer cleanupEdgeDNS(t, file)
	others := e.otherNameservers()
	assert.Contains(others, "8.8.8.8")
	assert.Contains(others, "4.4.4.4")
	assert.Equal(len(others), 2)
}

func TestGetOtherNameservers2(t *testing.T) {
	assert := assert.New(t)
	e, file := setupEdgeDNS(t, predefinedResolvConf2)
	defer cleanupEdgeDNS(t, file)
	others := e.otherNameservers()
	assert.Contains(others, "8.8.8.8")
	assert.Contains(others, "9.9.9.9")
	assert.Contains(others, "10.0.0.1")
	assert.Equal(len(others), 3)
}
